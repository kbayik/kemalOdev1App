/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kemalOdev1App;

import java.util.ArrayList;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.*;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        Logger logger = Logger.getLogger(App.class.getName());

        int port = Integer.parseInt(System.getenv("PORT"));
        port(port);
        logger.info("Current port number:" + port);

        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);

          String input2 = req.queryParams("input2");
          java.util.Scanner sc2 = new java.util.Scanner(input2);
          sc2.useDelimiter("[;\r\n]+");
          while (sc2.hasNext())
          {
            int value = Integer.parseInt(sc2.next().replaceAll("\\s",""));
            inputList2.add(value);
          }
          sc2.close();
          System.out.println(inputList2);


          String input3 = req.queryParams("input3").replaceAll("\\s","");
          int input3AsInt = Integer.parseInt(input3);

          int result = App.searchBoth(inputList,inputList2, input3AsInt);

          Map<String, Integer> map = new HashMap<String, Integer>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }


    public static int searchBoth(ArrayList<Integer> array, ArrayList<Integer> SecArray, int data){
        boolean firstFound = false;
        boolean secondFound = false;
        if(array == null && SecArray == null) 
            return -1;
        
        if(array == null && SecArray != null) 
            return -1;
        
        if(array != null && SecArray == null) 
            return -1;

        for(int i = 0;i<array.size();i++) {
            if(array.get(i) == data) {
                firstFound = true;
            }
        }

        for(int i = 0;i<SecArray.size();i++) {
            if(SecArray.get(i) == data) {
                secondFound = true;
            }
        }

        if(firstFound && secondFound) return 3;
        else if(!firstFound && secondFound) return 2;
        else if(firstFound && !secondFound) return 1;
        else return 0;

    }
}
